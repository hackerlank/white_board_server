// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WhiteBoardMessage.proto

#ifndef PROTOBUF_WhiteBoardMessage_2eproto__INCLUDED
#define PROTOBUF_WhiteBoardMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WhiteBoardMessage_2eproto();
void protobuf_AssignDesc_WhiteBoardMessage_2eproto();
void protobuf_ShutdownFile_WhiteBoardMessage_2eproto();

class WhiteBoardMessage;
class WhiteBoardMessageList;

// ===================================================================

class WhiteBoardMessage : public ::google::protobuf::Message {
 public:
  WhiteBoardMessage();
  virtual ~WhiteBoardMessage();

  WhiteBoardMessage(const WhiteBoardMessage& from);

  inline WhiteBoardMessage& operator=(const WhiteBoardMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WhiteBoardMessage& default_instance();

  void Swap(WhiteBoardMessage* other);

  // implements Message ----------------------------------------------

  WhiteBoardMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WhiteBoardMessage& from);
  void MergeFrom(const WhiteBoardMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 shapeID = 1;
  inline bool has_shapeid() const;
  inline void clear_shapeid();
  static const int kShapeIDFieldNumber = 1;
  inline ::google::protobuf::uint32 shapeid() const;
  inline void set_shapeid(::google::protobuf::uint32 value);

  // optional string shapeType = 2;
  inline bool has_shapetype() const;
  inline void clear_shapetype();
  static const int kShapeTypeFieldNumber = 2;
  inline const ::std::string& shapetype() const;
  inline void set_shapetype(const ::std::string& value);
  inline void set_shapetype(const char* value);
  inline void set_shapetype(const char* value, size_t size);
  inline ::std::string* mutable_shapetype();
  inline ::std::string* release_shapetype();
  inline void set_allocated_shapetype(::std::string* shapetype);

  // optional bytes shapeData = 3;
  inline bool has_shapedata() const;
  inline void clear_shapedata();
  static const int kShapeDataFieldNumber = 3;
  inline const ::std::string& shapedata() const;
  inline void set_shapedata(const ::std::string& value);
  inline void set_shapedata(const char* value);
  inline void set_shapedata(const void* value, size_t size);
  inline ::std::string* mutable_shapedata();
  inline ::std::string* release_shapedata();
  inline void set_allocated_shapedata(::std::string* shapedata);

  // optional bytes shapeProperty = 4;
  inline bool has_shapeproperty() const;
  inline void clear_shapeproperty();
  static const int kShapePropertyFieldNumber = 4;
  inline const ::std::string& shapeproperty() const;
  inline void set_shapeproperty(const ::std::string& value);
  inline void set_shapeproperty(const char* value);
  inline void set_shapeproperty(const void* value, size_t size);
  inline ::std::string* mutable_shapeproperty();
  inline ::std::string* release_shapeproperty();
  inline void set_allocated_shapeproperty(::std::string* shapeproperty);

  // @@protoc_insertion_point(class_scope:WhiteBoardMessage)
 private:
  inline void set_has_shapeid();
  inline void clear_has_shapeid();
  inline void set_has_shapetype();
  inline void clear_has_shapetype();
  inline void set_has_shapedata();
  inline void clear_has_shapedata();
  inline void set_has_shapeproperty();
  inline void clear_has_shapeproperty();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* shapetype_;
  ::std::string* shapedata_;
  ::std::string* shapeproperty_;
  ::google::protobuf::uint32 shapeid_;
  friend void  protobuf_AddDesc_WhiteBoardMessage_2eproto();
  friend void protobuf_AssignDesc_WhiteBoardMessage_2eproto();
  friend void protobuf_ShutdownFile_WhiteBoardMessage_2eproto();

  void InitAsDefaultInstance();
  static WhiteBoardMessage* default_instance_;
};
// -------------------------------------------------------------------

class WhiteBoardMessageList : public ::google::protobuf::Message {
 public:
  WhiteBoardMessageList();
  virtual ~WhiteBoardMessageList();

  WhiteBoardMessageList(const WhiteBoardMessageList& from);

  inline WhiteBoardMessageList& operator=(const WhiteBoardMessageList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WhiteBoardMessageList& default_instance();

  void Swap(WhiteBoardMessageList* other);

  // implements Message ----------------------------------------------

  WhiteBoardMessageList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WhiteBoardMessageList& from);
  void MergeFrom(const WhiteBoardMessageList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .WhiteBoardMessage ShapeObject = 1;
  inline int shapeobject_size() const;
  inline void clear_shapeobject();
  static const int kShapeObjectFieldNumber = 1;
  inline const ::WhiteBoardMessage& shapeobject(int index) const;
  inline ::WhiteBoardMessage* mutable_shapeobject(int index);
  inline ::WhiteBoardMessage* add_shapeobject();
  inline const ::google::protobuf::RepeatedPtrField< ::WhiteBoardMessage >&
      shapeobject() const;
  inline ::google::protobuf::RepeatedPtrField< ::WhiteBoardMessage >*
      mutable_shapeobject();

  // @@protoc_insertion_point(class_scope:WhiteBoardMessageList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::WhiteBoardMessage > shapeobject_;
  friend void  protobuf_AddDesc_WhiteBoardMessage_2eproto();
  friend void protobuf_AssignDesc_WhiteBoardMessage_2eproto();
  friend void protobuf_ShutdownFile_WhiteBoardMessage_2eproto();

  void InitAsDefaultInstance();
  static WhiteBoardMessageList* default_instance_;
};
// ===================================================================


// ===================================================================

// WhiteBoardMessage

// optional uint32 shapeID = 1;
inline bool WhiteBoardMessage::has_shapeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WhiteBoardMessage::set_has_shapeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WhiteBoardMessage::clear_has_shapeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WhiteBoardMessage::clear_shapeid() {
  shapeid_ = 0u;
  clear_has_shapeid();
}
inline ::google::protobuf::uint32 WhiteBoardMessage::shapeid() const {
  // @@protoc_insertion_point(field_get:WhiteBoardMessage.shapeID)
  return shapeid_;
}
inline void WhiteBoardMessage::set_shapeid(::google::protobuf::uint32 value) {
  set_has_shapeid();
  shapeid_ = value;
  // @@protoc_insertion_point(field_set:WhiteBoardMessage.shapeID)
}

// optional string shapeType = 2;
inline bool WhiteBoardMessage::has_shapetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WhiteBoardMessage::set_has_shapetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WhiteBoardMessage::clear_has_shapetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WhiteBoardMessage::clear_shapetype() {
  if (shapetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shapetype_->clear();
  }
  clear_has_shapetype();
}
inline const ::std::string& WhiteBoardMessage::shapetype() const {
  // @@protoc_insertion_point(field_get:WhiteBoardMessage.shapeType)
  return *shapetype_;
}
inline void WhiteBoardMessage::set_shapetype(const ::std::string& value) {
  set_has_shapetype();
  if (shapetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shapetype_ = new ::std::string;
  }
  shapetype_->assign(value);
  // @@protoc_insertion_point(field_set:WhiteBoardMessage.shapeType)
}
inline void WhiteBoardMessage::set_shapetype(const char* value) {
  set_has_shapetype();
  if (shapetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shapetype_ = new ::std::string;
  }
  shapetype_->assign(value);
  // @@protoc_insertion_point(field_set_char:WhiteBoardMessage.shapeType)
}
inline void WhiteBoardMessage::set_shapetype(const char* value, size_t size) {
  set_has_shapetype();
  if (shapetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shapetype_ = new ::std::string;
  }
  shapetype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:WhiteBoardMessage.shapeType)
}
inline ::std::string* WhiteBoardMessage::mutable_shapetype() {
  set_has_shapetype();
  if (shapetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shapetype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:WhiteBoardMessage.shapeType)
  return shapetype_;
}
inline ::std::string* WhiteBoardMessage::release_shapetype() {
  clear_has_shapetype();
  if (shapetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = shapetype_;
    shapetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WhiteBoardMessage::set_allocated_shapetype(::std::string* shapetype) {
  if (shapetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shapetype_;
  }
  if (shapetype) {
    set_has_shapetype();
    shapetype_ = shapetype;
  } else {
    clear_has_shapetype();
    shapetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:WhiteBoardMessage.shapeType)
}

// optional bytes shapeData = 3;
inline bool WhiteBoardMessage::has_shapedata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WhiteBoardMessage::set_has_shapedata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WhiteBoardMessage::clear_has_shapedata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WhiteBoardMessage::clear_shapedata() {
  if (shapedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shapedata_->clear();
  }
  clear_has_shapedata();
}
inline const ::std::string& WhiteBoardMessage::shapedata() const {
  // @@protoc_insertion_point(field_get:WhiteBoardMessage.shapeData)
  return *shapedata_;
}
inline void WhiteBoardMessage::set_shapedata(const ::std::string& value) {
  set_has_shapedata();
  if (shapedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shapedata_ = new ::std::string;
  }
  shapedata_->assign(value);
  // @@protoc_insertion_point(field_set:WhiteBoardMessage.shapeData)
}
inline void WhiteBoardMessage::set_shapedata(const char* value) {
  set_has_shapedata();
  if (shapedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shapedata_ = new ::std::string;
  }
  shapedata_->assign(value);
  // @@protoc_insertion_point(field_set_char:WhiteBoardMessage.shapeData)
}
inline void WhiteBoardMessage::set_shapedata(const void* value, size_t size) {
  set_has_shapedata();
  if (shapedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shapedata_ = new ::std::string;
  }
  shapedata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:WhiteBoardMessage.shapeData)
}
inline ::std::string* WhiteBoardMessage::mutable_shapedata() {
  set_has_shapedata();
  if (shapedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shapedata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:WhiteBoardMessage.shapeData)
  return shapedata_;
}
inline ::std::string* WhiteBoardMessage::release_shapedata() {
  clear_has_shapedata();
  if (shapedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = shapedata_;
    shapedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WhiteBoardMessage::set_allocated_shapedata(::std::string* shapedata) {
  if (shapedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shapedata_;
  }
  if (shapedata) {
    set_has_shapedata();
    shapedata_ = shapedata;
  } else {
    clear_has_shapedata();
    shapedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:WhiteBoardMessage.shapeData)
}

// optional bytes shapeProperty = 4;
inline bool WhiteBoardMessage::has_shapeproperty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WhiteBoardMessage::set_has_shapeproperty() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WhiteBoardMessage::clear_has_shapeproperty() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WhiteBoardMessage::clear_shapeproperty() {
  if (shapeproperty_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shapeproperty_->clear();
  }
  clear_has_shapeproperty();
}
inline const ::std::string& WhiteBoardMessage::shapeproperty() const {
  // @@protoc_insertion_point(field_get:WhiteBoardMessage.shapeProperty)
  return *shapeproperty_;
}
inline void WhiteBoardMessage::set_shapeproperty(const ::std::string& value) {
  set_has_shapeproperty();
  if (shapeproperty_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shapeproperty_ = new ::std::string;
  }
  shapeproperty_->assign(value);
  // @@protoc_insertion_point(field_set:WhiteBoardMessage.shapeProperty)
}
inline void WhiteBoardMessage::set_shapeproperty(const char* value) {
  set_has_shapeproperty();
  if (shapeproperty_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shapeproperty_ = new ::std::string;
  }
  shapeproperty_->assign(value);
  // @@protoc_insertion_point(field_set_char:WhiteBoardMessage.shapeProperty)
}
inline void WhiteBoardMessage::set_shapeproperty(const void* value, size_t size) {
  set_has_shapeproperty();
  if (shapeproperty_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shapeproperty_ = new ::std::string;
  }
  shapeproperty_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:WhiteBoardMessage.shapeProperty)
}
inline ::std::string* WhiteBoardMessage::mutable_shapeproperty() {
  set_has_shapeproperty();
  if (shapeproperty_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shapeproperty_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:WhiteBoardMessage.shapeProperty)
  return shapeproperty_;
}
inline ::std::string* WhiteBoardMessage::release_shapeproperty() {
  clear_has_shapeproperty();
  if (shapeproperty_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = shapeproperty_;
    shapeproperty_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WhiteBoardMessage::set_allocated_shapeproperty(::std::string* shapeproperty) {
  if (shapeproperty_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shapeproperty_;
  }
  if (shapeproperty) {
    set_has_shapeproperty();
    shapeproperty_ = shapeproperty;
  } else {
    clear_has_shapeproperty();
    shapeproperty_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:WhiteBoardMessage.shapeProperty)
}

// -------------------------------------------------------------------

// WhiteBoardMessageList

// repeated .WhiteBoardMessage ShapeObject = 1;
inline int WhiteBoardMessageList::shapeobject_size() const {
  return shapeobject_.size();
}
inline void WhiteBoardMessageList::clear_shapeobject() {
  shapeobject_.Clear();
}
inline const ::WhiteBoardMessage& WhiteBoardMessageList::shapeobject(int index) const {
  // @@protoc_insertion_point(field_get:WhiteBoardMessageList.ShapeObject)
  return shapeobject_.Get(index);
}
inline ::WhiteBoardMessage* WhiteBoardMessageList::mutable_shapeobject(int index) {
  // @@protoc_insertion_point(field_mutable:WhiteBoardMessageList.ShapeObject)
  return shapeobject_.Mutable(index);
}
inline ::WhiteBoardMessage* WhiteBoardMessageList::add_shapeobject() {
  // @@protoc_insertion_point(field_add:WhiteBoardMessageList.ShapeObject)
  return shapeobject_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::WhiteBoardMessage >&
WhiteBoardMessageList::shapeobject() const {
  // @@protoc_insertion_point(field_list:WhiteBoardMessageList.ShapeObject)
  return shapeobject_;
}
inline ::google::protobuf::RepeatedPtrField< ::WhiteBoardMessage >*
WhiteBoardMessageList::mutable_shapeobject() {
  // @@protoc_insertion_point(field_mutable_list:WhiteBoardMessageList.ShapeObject)
  return &shapeobject_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WhiteBoardMessage_2eproto__INCLUDED
