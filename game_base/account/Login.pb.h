// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#ifndef PROTOBUF_Login_2eproto__INCLUDED
#define PROTOBUF_Login_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Login_2eproto();
void protobuf_AssignDesc_Login_2eproto();
void protobuf_ShutdownFile_Login_2eproto();

class Login;

// ===================================================================

class Login : public ::google::protobuf::Message {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();

  void Swap(Login* other);

  // implements Message ----------------------------------------------

  Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string LoginName = 1;
  inline bool has_loginname() const;
  inline void clear_loginname();
  static const int kLoginNameFieldNumber = 1;
  inline const ::std::string& loginname() const;
  inline void set_loginname(const ::std::string& value);
  inline void set_loginname(const char* value);
  inline void set_loginname(const char* value, size_t size);
  inline ::std::string* mutable_loginname();
  inline ::std::string* release_loginname();
  inline void set_allocated_loginname(::std::string* loginname);

  // optional string LoginPwd = 2;
  inline bool has_loginpwd() const;
  inline void clear_loginpwd();
  static const int kLoginPwdFieldNumber = 2;
  inline const ::std::string& loginpwd() const;
  inline void set_loginpwd(const ::std::string& value);
  inline void set_loginpwd(const char* value);
  inline void set_loginpwd(const char* value, size_t size);
  inline ::std::string* mutable_loginpwd();
  inline ::std::string* release_loginpwd();
  inline void set_allocated_loginpwd(::std::string* loginpwd);

  // @@protoc_insertion_point(class_scope:Login)
 private:
  inline void set_has_loginname();
  inline void clear_has_loginname();
  inline void set_has_loginpwd();
  inline void clear_has_loginpwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* loginname_;
  ::std::string* loginpwd_;
  friend void  protobuf_AddDesc_Login_2eproto();
  friend void protobuf_AssignDesc_Login_2eproto();
  friend void protobuf_ShutdownFile_Login_2eproto();

  void InitAsDefaultInstance();
  static Login* default_instance_;
};
// ===================================================================


// ===================================================================

// Login

// optional string LoginName = 1;
inline bool Login::has_loginname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login::set_has_loginname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login::clear_has_loginname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login::clear_loginname() {
  if (loginname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginname_->clear();
  }
  clear_has_loginname();
}
inline const ::std::string& Login::loginname() const {
  // @@protoc_insertion_point(field_get:Login.LoginName)
  return *loginname_;
}
inline void Login::set_loginname(const ::std::string& value) {
  set_has_loginname();
  if (loginname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginname_ = new ::std::string;
  }
  loginname_->assign(value);
  // @@protoc_insertion_point(field_set:Login.LoginName)
}
inline void Login::set_loginname(const char* value) {
  set_has_loginname();
  if (loginname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginname_ = new ::std::string;
  }
  loginname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Login.LoginName)
}
inline void Login::set_loginname(const char* value, size_t size) {
  set_has_loginname();
  if (loginname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginname_ = new ::std::string;
  }
  loginname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Login.LoginName)
}
inline ::std::string* Login::mutable_loginname() {
  set_has_loginname();
  if (loginname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Login.LoginName)
  return loginname_;
}
inline ::std::string* Login::release_loginname() {
  clear_has_loginname();
  if (loginname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = loginname_;
    loginname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Login::set_allocated_loginname(::std::string* loginname) {
  if (loginname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loginname_;
  }
  if (loginname) {
    set_has_loginname();
    loginname_ = loginname;
  } else {
    clear_has_loginname();
    loginname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Login.LoginName)
}

// optional string LoginPwd = 2;
inline bool Login::has_loginpwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login::set_has_loginpwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login::clear_has_loginpwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login::clear_loginpwd() {
  if (loginpwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginpwd_->clear();
  }
  clear_has_loginpwd();
}
inline const ::std::string& Login::loginpwd() const {
  // @@protoc_insertion_point(field_get:Login.LoginPwd)
  return *loginpwd_;
}
inline void Login::set_loginpwd(const ::std::string& value) {
  set_has_loginpwd();
  if (loginpwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginpwd_ = new ::std::string;
  }
  loginpwd_->assign(value);
  // @@protoc_insertion_point(field_set:Login.LoginPwd)
}
inline void Login::set_loginpwd(const char* value) {
  set_has_loginpwd();
  if (loginpwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginpwd_ = new ::std::string;
  }
  loginpwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:Login.LoginPwd)
}
inline void Login::set_loginpwd(const char* value, size_t size) {
  set_has_loginpwd();
  if (loginpwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginpwd_ = new ::std::string;
  }
  loginpwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Login.LoginPwd)
}
inline ::std::string* Login::mutable_loginpwd() {
  set_has_loginpwd();
  if (loginpwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginpwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Login.LoginPwd)
  return loginpwd_;
}
inline ::std::string* Login::release_loginpwd() {
  clear_has_loginpwd();
  if (loginpwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = loginpwd_;
    loginpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Login::set_allocated_loginpwd(::std::string* loginpwd) {
  if (loginpwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loginpwd_;
  }
  if (loginpwd) {
    set_has_loginpwd();
    loginpwd_ = loginpwd;
  } else {
    clear_has_loginpwd();
    loginpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Login.LoginPwd)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Login_2eproto__INCLUDED
