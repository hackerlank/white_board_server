// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RoomOperate.proto

#ifndef PROTOBUF_RoomOperate_2eproto__INCLUDED
#define PROTOBUF_RoomOperate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RoomOperate_2eproto();
void protobuf_AssignDesc_RoomOperate_2eproto();
void protobuf_ShutdownFile_RoomOperate_2eproto();

class RoomOperate;

// ===================================================================

class RoomOperate : public ::google::protobuf::Message {
 public:
  RoomOperate();
  virtual ~RoomOperate();

  RoomOperate(const RoomOperate& from);

  inline RoomOperate& operator=(const RoomOperate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomOperate& default_instance();

  void Swap(RoomOperate* other);

  // implements Message ----------------------------------------------

  RoomOperate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomOperate& from);
  void MergeFrom(const RoomOperate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 oprate_type = 1;
  inline bool has_oprate_type() const;
  inline void clear_oprate_type();
  static const int kOprateTypeFieldNumber = 1;
  inline ::google::protobuf::int32 oprate_type() const;
  inline void set_oprate_type(::google::protobuf::int32 value);

  // optional string use_name = 2;
  inline bool has_use_name() const;
  inline void clear_use_name();
  static const int kUseNameFieldNumber = 2;
  inline const ::std::string& use_name() const;
  inline void set_use_name(const ::std::string& value);
  inline void set_use_name(const char* value);
  inline void set_use_name(const char* value, size_t size);
  inline ::std::string* mutable_use_name();
  inline ::std::string* release_use_name();
  inline void set_allocated_use_name(::std::string* use_name);

  // optional string room_key_origin = 3;
  inline bool has_room_key_origin() const;
  inline void clear_room_key_origin();
  static const int kRoomKeyOriginFieldNumber = 3;
  inline const ::std::string& room_key_origin() const;
  inline void set_room_key_origin(const ::std::string& value);
  inline void set_room_key_origin(const char* value);
  inline void set_room_key_origin(const char* value, size_t size);
  inline ::std::string* mutable_room_key_origin();
  inline ::std::string* release_room_key_origin();
  inline void set_allocated_room_key_origin(::std::string* room_key_origin);

  // optional string room_key_destination = 4;
  inline bool has_room_key_destination() const;
  inline void clear_room_key_destination();
  static const int kRoomKeyDestinationFieldNumber = 4;
  inline const ::std::string& room_key_destination() const;
  inline void set_room_key_destination(const ::std::string& value);
  inline void set_room_key_destination(const char* value);
  inline void set_room_key_destination(const char* value, size_t size);
  inline ::std::string* mutable_room_key_destination();
  inline ::std::string* release_room_key_destination();
  inline void set_allocated_room_key_destination(::std::string* room_key_destination);

  // @@protoc_insertion_point(class_scope:RoomOperate)
 private:
  inline void set_has_oprate_type();
  inline void clear_has_oprate_type();
  inline void set_has_use_name();
  inline void clear_has_use_name();
  inline void set_has_room_key_origin();
  inline void clear_has_room_key_origin();
  inline void set_has_room_key_destination();
  inline void clear_has_room_key_destination();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* use_name_;
  ::std::string* room_key_origin_;
  ::std::string* room_key_destination_;
  ::google::protobuf::int32 oprate_type_;
  friend void  protobuf_AddDesc_RoomOperate_2eproto();
  friend void protobuf_AssignDesc_RoomOperate_2eproto();
  friend void protobuf_ShutdownFile_RoomOperate_2eproto();

  void InitAsDefaultInstance();
  static RoomOperate* default_instance_;
};
// ===================================================================


// ===================================================================

// RoomOperate

// optional int32 oprate_type = 1;
inline bool RoomOperate::has_oprate_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomOperate::set_has_oprate_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomOperate::clear_has_oprate_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomOperate::clear_oprate_type() {
  oprate_type_ = 0;
  clear_has_oprate_type();
}
inline ::google::protobuf::int32 RoomOperate::oprate_type() const {
  // @@protoc_insertion_point(field_get:RoomOperate.oprate_type)
  return oprate_type_;
}
inline void RoomOperate::set_oprate_type(::google::protobuf::int32 value) {
  set_has_oprate_type();
  oprate_type_ = value;
  // @@protoc_insertion_point(field_set:RoomOperate.oprate_type)
}

// optional string use_name = 2;
inline bool RoomOperate::has_use_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomOperate::set_has_use_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomOperate::clear_has_use_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomOperate::clear_use_name() {
  if (use_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    use_name_->clear();
  }
  clear_has_use_name();
}
inline const ::std::string& RoomOperate::use_name() const {
  // @@protoc_insertion_point(field_get:RoomOperate.use_name)
  return *use_name_;
}
inline void RoomOperate::set_use_name(const ::std::string& value) {
  set_has_use_name();
  if (use_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    use_name_ = new ::std::string;
  }
  use_name_->assign(value);
  // @@protoc_insertion_point(field_set:RoomOperate.use_name)
}
inline void RoomOperate::set_use_name(const char* value) {
  set_has_use_name();
  if (use_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    use_name_ = new ::std::string;
  }
  use_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:RoomOperate.use_name)
}
inline void RoomOperate::set_use_name(const char* value, size_t size) {
  set_has_use_name();
  if (use_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    use_name_ = new ::std::string;
  }
  use_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RoomOperate.use_name)
}
inline ::std::string* RoomOperate::mutable_use_name() {
  set_has_use_name();
  if (use_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    use_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RoomOperate.use_name)
  return use_name_;
}
inline ::std::string* RoomOperate::release_use_name() {
  clear_has_use_name();
  if (use_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = use_name_;
    use_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomOperate::set_allocated_use_name(::std::string* use_name) {
  if (use_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete use_name_;
  }
  if (use_name) {
    set_has_use_name();
    use_name_ = use_name;
  } else {
    clear_has_use_name();
    use_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RoomOperate.use_name)
}

// optional string room_key_origin = 3;
inline bool RoomOperate::has_room_key_origin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomOperate::set_has_room_key_origin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomOperate::clear_has_room_key_origin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomOperate::clear_room_key_origin() {
  if (room_key_origin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_key_origin_->clear();
  }
  clear_has_room_key_origin();
}
inline const ::std::string& RoomOperate::room_key_origin() const {
  // @@protoc_insertion_point(field_get:RoomOperate.room_key_origin)
  return *room_key_origin_;
}
inline void RoomOperate::set_room_key_origin(const ::std::string& value) {
  set_has_room_key_origin();
  if (room_key_origin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_key_origin_ = new ::std::string;
  }
  room_key_origin_->assign(value);
  // @@protoc_insertion_point(field_set:RoomOperate.room_key_origin)
}
inline void RoomOperate::set_room_key_origin(const char* value) {
  set_has_room_key_origin();
  if (room_key_origin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_key_origin_ = new ::std::string;
  }
  room_key_origin_->assign(value);
  // @@protoc_insertion_point(field_set_char:RoomOperate.room_key_origin)
}
inline void RoomOperate::set_room_key_origin(const char* value, size_t size) {
  set_has_room_key_origin();
  if (room_key_origin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_key_origin_ = new ::std::string;
  }
  room_key_origin_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RoomOperate.room_key_origin)
}
inline ::std::string* RoomOperate::mutable_room_key_origin() {
  set_has_room_key_origin();
  if (room_key_origin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_key_origin_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RoomOperate.room_key_origin)
  return room_key_origin_;
}
inline ::std::string* RoomOperate::release_room_key_origin() {
  clear_has_room_key_origin();
  if (room_key_origin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_key_origin_;
    room_key_origin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomOperate::set_allocated_room_key_origin(::std::string* room_key_origin) {
  if (room_key_origin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_key_origin_;
  }
  if (room_key_origin) {
    set_has_room_key_origin();
    room_key_origin_ = room_key_origin;
  } else {
    clear_has_room_key_origin();
    room_key_origin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RoomOperate.room_key_origin)
}

// optional string room_key_destination = 4;
inline bool RoomOperate::has_room_key_destination() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoomOperate::set_has_room_key_destination() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoomOperate::clear_has_room_key_destination() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoomOperate::clear_room_key_destination() {
  if (room_key_destination_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_key_destination_->clear();
  }
  clear_has_room_key_destination();
}
inline const ::std::string& RoomOperate::room_key_destination() const {
  // @@protoc_insertion_point(field_get:RoomOperate.room_key_destination)
  return *room_key_destination_;
}
inline void RoomOperate::set_room_key_destination(const ::std::string& value) {
  set_has_room_key_destination();
  if (room_key_destination_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_key_destination_ = new ::std::string;
  }
  room_key_destination_->assign(value);
  // @@protoc_insertion_point(field_set:RoomOperate.room_key_destination)
}
inline void RoomOperate::set_room_key_destination(const char* value) {
  set_has_room_key_destination();
  if (room_key_destination_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_key_destination_ = new ::std::string;
  }
  room_key_destination_->assign(value);
  // @@protoc_insertion_point(field_set_char:RoomOperate.room_key_destination)
}
inline void RoomOperate::set_room_key_destination(const char* value, size_t size) {
  set_has_room_key_destination();
  if (room_key_destination_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_key_destination_ = new ::std::string;
  }
  room_key_destination_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RoomOperate.room_key_destination)
}
inline ::std::string* RoomOperate::mutable_room_key_destination() {
  set_has_room_key_destination();
  if (room_key_destination_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_key_destination_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RoomOperate.room_key_destination)
  return room_key_destination_;
}
inline ::std::string* RoomOperate::release_room_key_destination() {
  clear_has_room_key_destination();
  if (room_key_destination_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_key_destination_;
    room_key_destination_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomOperate::set_allocated_room_key_destination(::std::string* room_key_destination) {
  if (room_key_destination_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_key_destination_;
  }
  if (room_key_destination) {
    set_has_room_key_destination();
    room_key_destination_ = room_key_destination;
  } else {
    clear_has_room_key_destination();
    room_key_destination_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RoomOperate.room_key_destination)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RoomOperate_2eproto__INCLUDED
