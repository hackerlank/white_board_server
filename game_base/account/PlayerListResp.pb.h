// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerListResp.proto

#ifndef PROTOBUF_PlayerListResp_2eproto__INCLUDED
#define PROTOBUF_PlayerListResp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PlayerListResp_2eproto();
void protobuf_AssignDesc_PlayerListResp_2eproto();
void protobuf_ShutdownFile_PlayerListResp_2eproto();

class PlayerListResp;

// ===================================================================

class PlayerListResp : public ::google::protobuf::Message {
 public:
  PlayerListResp();
  virtual ~PlayerListResp();

  PlayerListResp(const PlayerListResp& from);

  inline PlayerListResp& operator=(const PlayerListResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerListResp& default_instance();

  void Swap(PlayerListResp* other);

  // implements Message ----------------------------------------------

  PlayerListResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerListResp& from);
  void MergeFrom(const PlayerListResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string room_key = 1;
  inline bool has_room_key() const;
  inline void clear_room_key();
  static const int kRoomKeyFieldNumber = 1;
  inline const ::std::string& room_key() const;
  inline void set_room_key(const ::std::string& value);
  inline void set_room_key(const char* value);
  inline void set_room_key(const char* value, size_t size);
  inline ::std::string* mutable_room_key();
  inline ::std::string* release_room_key();
  inline void set_allocated_room_key(::std::string* room_key);

  // repeated string player_list = 2;
  inline int player_list_size() const;
  inline void clear_player_list();
  static const int kPlayerListFieldNumber = 2;
  inline const ::std::string& player_list(int index) const;
  inline ::std::string* mutable_player_list(int index);
  inline void set_player_list(int index, const ::std::string& value);
  inline void set_player_list(int index, const char* value);
  inline void set_player_list(int index, const char* value, size_t size);
  inline ::std::string* add_player_list();
  inline void add_player_list(const ::std::string& value);
  inline void add_player_list(const char* value);
  inline void add_player_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& player_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_player_list();

  // @@protoc_insertion_point(class_scope:PlayerListResp)
 private:
  inline void set_has_room_key();
  inline void clear_has_room_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* room_key_;
  ::google::protobuf::RepeatedPtrField< ::std::string> player_list_;
  friend void  protobuf_AddDesc_PlayerListResp_2eproto();
  friend void protobuf_AssignDesc_PlayerListResp_2eproto();
  friend void protobuf_ShutdownFile_PlayerListResp_2eproto();

  void InitAsDefaultInstance();
  static PlayerListResp* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerListResp

// optional string room_key = 1;
inline bool PlayerListResp::has_room_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerListResp::set_has_room_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerListResp::clear_has_room_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerListResp::clear_room_key() {
  if (room_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_key_->clear();
  }
  clear_has_room_key();
}
inline const ::std::string& PlayerListResp::room_key() const {
  // @@protoc_insertion_point(field_get:PlayerListResp.room_key)
  return *room_key_;
}
inline void PlayerListResp::set_room_key(const ::std::string& value) {
  set_has_room_key();
  if (room_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_key_ = new ::std::string;
  }
  room_key_->assign(value);
  // @@protoc_insertion_point(field_set:PlayerListResp.room_key)
}
inline void PlayerListResp::set_room_key(const char* value) {
  set_has_room_key();
  if (room_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_key_ = new ::std::string;
  }
  room_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:PlayerListResp.room_key)
}
inline void PlayerListResp::set_room_key(const char* value, size_t size) {
  set_has_room_key();
  if (room_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_key_ = new ::std::string;
  }
  room_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PlayerListResp.room_key)
}
inline ::std::string* PlayerListResp::mutable_room_key() {
  set_has_room_key();
  if (room_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PlayerListResp.room_key)
  return room_key_;
}
inline ::std::string* PlayerListResp::release_room_key() {
  clear_has_room_key();
  if (room_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_key_;
    room_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlayerListResp::set_allocated_room_key(::std::string* room_key) {
  if (room_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_key_;
  }
  if (room_key) {
    set_has_room_key();
    room_key_ = room_key;
  } else {
    clear_has_room_key();
    room_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PlayerListResp.room_key)
}

// repeated string player_list = 2;
inline int PlayerListResp::player_list_size() const {
  return player_list_.size();
}
inline void PlayerListResp::clear_player_list() {
  player_list_.Clear();
}
inline const ::std::string& PlayerListResp::player_list(int index) const {
  // @@protoc_insertion_point(field_get:PlayerListResp.player_list)
  return player_list_.Get(index);
}
inline ::std::string* PlayerListResp::mutable_player_list(int index) {
  // @@protoc_insertion_point(field_mutable:PlayerListResp.player_list)
  return player_list_.Mutable(index);
}
inline void PlayerListResp::set_player_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PlayerListResp.player_list)
  player_list_.Mutable(index)->assign(value);
}
inline void PlayerListResp::set_player_list(int index, const char* value) {
  player_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PlayerListResp.player_list)
}
inline void PlayerListResp::set_player_list(int index, const char* value, size_t size) {
  player_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PlayerListResp.player_list)
}
inline ::std::string* PlayerListResp::add_player_list() {
  return player_list_.Add();
}
inline void PlayerListResp::add_player_list(const ::std::string& value) {
  player_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PlayerListResp.player_list)
}
inline void PlayerListResp::add_player_list(const char* value) {
  player_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PlayerListResp.player_list)
}
inline void PlayerListResp::add_player_list(const char* value, size_t size) {
  player_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PlayerListResp.player_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PlayerListResp::player_list() const {
  // @@protoc_insertion_point(field_list:PlayerListResp.player_list)
  return player_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PlayerListResp::mutable_player_list() {
  // @@protoc_insertion_point(field_mutable_list:PlayerListResp.player_list)
  return &player_list_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PlayerListResp_2eproto__INCLUDED
